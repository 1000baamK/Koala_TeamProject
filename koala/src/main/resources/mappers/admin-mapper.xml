<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="adminMapper">

	<!-- 전체 개수를 알기 위해 별도의 VO를 작성 -->
	<resultMap type="allTable" id="allTableResultSet">
		<result column="member" property="member"/>
		<result column="supporters" property="supporters"/>
		<result column="createSetting" property="createSetting"/>
		<result column="errorBoard" property="errorBoard"/>
		<result column="bulletinBoard" property="bulletinBoard"/>
		<result column="qnaBoard" property="qnaBoard"/>
		<result column="blockIp" property="blockIp"/>
		<result column="issue" property="issue"/>
	</resultMap>
	<!-- 서포터즈 회원 조회 VO >> 특이사항 : resultMap을 상속 -->
	<resultMap type="supporters" id="supportResultSet" extends="memberMapper.memberResultSet">
		<result column="REF_UNO" property="refUno"/>
		<result column="GITHUB_ID" property="githubId"/>
		<result column="CREATE_DATE" property="createDate"/>
	</resultMap>
	<!-- 대기 중인 라이브러리 및 세팅 개수 조회 VO -->
	<resultMap type="createSetting" id="createSettingResultSet">
		<result column="SETTING_NO" property="settingNo"/>
		<result column="REF_UNO" property="refUno"/>
		<result column="SETTING_TITLE" property="settingTitle"/>
		<result column="SETTING_VERSION" property="settingVersion"/>
		<result column="SORT_DESCRIPTION" property="sortDescription"/>
		<result column="SETTING_INFO" property="settingInfo"/>
		<result column="SETTING_CODE" property="settingCode"/>
		<result column="INPUT" property="input"/>
		<result column="SETTING_PATH" property="settingPath"/>
		<result column="STATUS" property="status"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="MODIFY_DATE" property="modifyDate"/>
	</resultMap>
	<!-- 부적절한 접근 사용자 조회 -->
	<resultMap type="blockIp" id="blockIpResultSet">
		<result column="IP" property="ip"/>
		<result column="COUNT" property="count"/>
		<result column="STATUS" property="status"/>
	</resultMap>
	
	
	<!-- 관리가 필요한 게시글 개수 및 회원수 -->
	<select id="allCount" resultMap="allTableResultSet">
		SELECT
			(SELECT COUNT(*) FROM MEMBER WHERE STATUS = 'Y') member,
			(SELECT COUNT(*) FROM SUPPORTERS S JOIN MEMBER M ON (S.REF_UNO = M.USER_NO) WHERE M.STATUS = 'Y') supporters,
			(SELECT COUNT(*) FROM CREATE_SETTING WHERE STATUS = 'W') createSetting,
			(SELECT COUNT(*) FROM ERROR_BOARD E JOIN BOARD B ON(E.REF_BNO = B.BOARD_NO) WHERE E.SOLVED = 'W' AND B.STATUS = 'Y') errorBoard,
			(SELECT COUNT(*) FROM BOARD WHERE STATUS = 'Y' AND CATEGORY = 'B') bulletinBoard,
			(SELECT COUNT(*) FROM BOARD WHERE STATUS = 'Y' AND CATEGORY = 'Q') qnaBoard,
			(SELECT COUNT(*) FROM BLOCK_IP) blockIp,
			(SELECT COUNT(*) FROM ERROR_BOARD E JOIN BOARD B ON(E.REF_BNO = B.BOARD_NO) WHERE E.SOLVED = 'E' AND B.STATUS = 'Y') issue
		FROM DUAL
	</select>
	
	<!-- 서포터즈 회원 조회 -->
	<select id="selectSupporters" resultMap="supportResultSet">
		SELECT * FROM SUPPORTERS JOIN MEMBER ON (USER_NO = REF_UNO)
	</select>
	<delete id="deleteSupporter" parameterType="string">
		DELETE FROM SUPPORTERS
			WHERE REF_UNO = (
    			SELECT USER_NO FROM MEMBER WHERE USER_ID = #{uesrId}
			)
	</delete>
	
	<!-- 아직 상태가 대기중인 라이브러리 및 세팅 -->
	<select id="selectWaitingLibrary" resultMap="createSettingResultSet">
		SELECT * FROM CREATE_SETTING WHERE STATUS='W' 
	</select>
	
	<!-- 상태가 결정되지 않은 에러 보드 게시판 -->
	<select id="selectErrorBoard" resultMap="errorBoardMapper.errorBoardResultSet">
		SELECT * FROM ERROR_BOARD E JOIN BOARD B ON (E.REF_BNO = B.BOARD_NO) WHERE SOLVED = 'W'
	</select>
	

	<!-- 부적절한 접근자 -->
	<!-- 전체 조회 -->
	<select id="selectBolckIp" resultMap="blockIpResultSet">
		SELECT * FROM BLOCK_IP ORDER BY STATUS DESC
	</select>
	<!-- 개별 조회 -->
	<select id="selectBlockIpUser" parameterType="string" resultMap="blockIpResultSet">
		SELECT * FROM BLOCK_IP WHERE IP = #{ip} 
	</select>
	<!-- 새로운 ip 추가 -->
	<insert id="insertBlockIpUser" parameterType="string">
		INSERT INTO BLOCK_IP VALUES (#{ip}, DEFAULT, DEFAULT)
	</insert>
	<!-- 카운터 추가 -->
	<update id="updateBlockIpUser" parameterType="string">
		UPDATE BLOCK_IP SET COUNT = COUNT + 1 WHERE IP = #{ip}
	</update>
	<!-- 5회가 되면 차단 -->
	<update id="blockBlockIpUser" parameterType="string">
		UPDATE BLOCK_IP SET STATUS = 'Y' WHERE IP = #{ip}
	</update>
	
	<update id="updateblockClear" parameterType="string">
		UPDATE BLOCK_IP SET COUNT = 0, STATUS = 'N' WHERE IP = #{ip}
	</update>
	
	<update id="updateblockAction" parameterType="string">
		UPDATE BLOCK_IP SET COUNT = 5, STATUS = 'Y' WHERE IP = #{ip}
	</update>
	<!--============================================================-->
	<!-- 유저 -->
	<select id="selectMemberList" resultMap="supportResultSet">
		SELECT * FROM MEMBER M LEFT JOIN SUPPORTERS S ON (M.USER_NO = S.REF_UNO) WHERE M.STATUS = 'Y'
	</select>
	<!--============================================================-->
	
	<insert id="InsertSupporters" parameterType="_int">
		INSERT INTO SUPPORTERS VALUES (#{client_No}, ' ', SYSDATE)
	</insert>
	<delete id="deleteSupporters" parameterType="_int">
		DELETE FROM SUPPORTERS WHERE REF_UNO = #{client_No}
	</delete>
	
	<select id="selectOneSupport" parameterType="_int" resultMap="supportResultSet">
		SELECT * FROM SUPPORTERS S JOIN MEMBER M ON(S.REF_UNO = M.USER_NO) WHERE S.REF_UNO = ${userNo}
	</select>
	
	<select id="selectMembercondition" parameterType="ms" resultMap="supportResultSet">
		SELECT * FROM MEMBER M LEFT JOIN SUPPORTERS S ON (M.USER_NO = S.REF_UNO) WHERE M.STATUS = 'Y' 
		<if test='searchQna == "id"'>
			AND M.USER_ID LIKE '%'||#{searchInput}||'%'
		</if>
		<if test='searchQna == "nickName"'>
			AND M.NICKNAME LIKE '%'||#{searchInput}||'%'
		</if>
		<if test='searchQna == "total"'></if>
	</select>
	
	<select id="selectCountMemberCondition" parameterType="ms" resultType="_int">
		SELECT COUNT(*) FROM MEMBER M LEFT JOIN SUPPORTERS S ON (M.USER_NO = S.REF_UNO) WHERE M.STATUS = 'Y' 
		<if test='searchQna == "id"'>
			AND M.USER_ID LIKE '%'||#{searchInput}||'%'
		</if>
		<if test='searchQna == "nickName"'>
			AND M.NICKNAME LIKE '%'||#{searchInput}||'%'
		</if>
		<if test='searchQna == "total"'></if>
	</select>
<!-- 	
	<select id="boardCount" parameterType="string">
		SELECT COUNT(*)
		<choose>
			<when test='board.equalsIgnoreCase("member")'>
				FROM MEMBER
			</when>
			<when test='board.equalsIgnoreCase("errorBoard")'>
				FROM ERROR_BOARD
			</when>
			<when test='board.equalsIgnoreCase("qnaBaord")'>
				FROM MEMBER
			</when>
		</choose>
		WHERE STATUS = 'Y'
	</select> -->
</mapper>