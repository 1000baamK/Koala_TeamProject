<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="adminMapper">
	<resultMap type="settingDetail" id="issuesDetailResultSet">
		<result column="SETTING_NO" property="setting.settingNo"/>
		<result column="BOARD_WRITER" property="board.boardWriter"/>
		<result column="BOARD_NO" property="board.boardNo"/>
		<result column="SETTING_TITLE" property="setting.settingTitle"/>
		<result column="SORT_DESCRIPTION" property="setting.sortDescription"/>
		<result column="SETTING_VERSION" property="setting.settingVersion" />
		<result column="SETTING_INFO" property="setting.settingInfo"/>
		<result column="SETTING_CODE" property="setting.settingCode"/>
		<result column="TITLE" property="board.title"/>
		<result column="USER_ID" property="member.userId"/>
		<result column="NICKNAME" property="member.nickName"/>
		<result column="CREATE_DATE" property="board.createDate"/>
		<result column="CONTENT" property="board.content"/>
		<result column="REF_SNO" property="errorBoard.refSno"/>
		<result column="MODIFIED_CODE" property="errorBoard.modifiedCode"/>
		<result column="MODIFIED_INFO" property="errorBoard.modifiedInfo"/>
	</resultMap>

	<!-- 전체 개수를 알기 위해 별도의 VO를 작성 -->
	<resultMap type="allTable" id="allTableResultSet">
		<result column="member" property="member"/>
		<result column="supporters" property="supporters"/>
		<result column="createSetting" property="createSetting"/>
		<result column="errorBoard" property="errorBoard"/>
		<result column="bulletinBoard" property="bulletinBoard"/>
		<result column="qnaBoard" property="qnaBoard"/>
		<result column="blockIp" property="blockIp"/>
		<result column="issue" property="issue"/>
	</resultMap>
	
	<resultMap type="modifyTeam" id="modifyTeamResultSet">
		<result column="teamname" property="teamName"/>
		<result column="creatorId" property="creatorId"/>
		<result column="user_id" property="userId"/>
		<result column="nickname" property="nickName"/>
		<result column="user_no" property="userNo"/>
		<result column="file_path" property="filePath"/>
		<result column="change_name" property="changeName"/>
		<result column="github_id" property="githubId"/>
	</resultMap>
	
	<resultMap type="sqlCloud" id="sqlCloudResultSet">
		<result column="TEAM_NO" property="teamNo"/>
		<result column="TEAMNAME" property="teamName"/>
		<result column="SQLCONTENT" property="sqlContent"/>
		<result column="CREATOR_NO" property="creatorNo"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="MODIFY_DATE" property="modifyDate"/>
	</resultMap>
	
	<resultMap type="issuesAndError" id="issuesAndErrorResultSet">
		<result column="SETTING_TITLE" property="settingTitle"/>
		<result column="SETTING_NO" property="settingNo"/>
		<result column="CC" property="count"/>
		<result column="SORT_DESCRIPTION" property="sortDescription"/>
	</resultMap>
	<!-- 서포터즈 회원 조회 VO >> 특이사항 : resultMap을 상속 -->
	<resultMap type="supporters" id="supportResultSet" extends="memberMapper.memberResultSet">
		<result column="REF_UNO" property="refUno"/>
		<result column="GITHUB_ID" property="githubId"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="REPO_URL" property="repoUrl"/>
	</resultMap>
	<!-- 대기 중인 라이브러리 및 세팅 개수 조회 VO -->
	<resultMap type="createSetting" id="createSettingResultSet">
		<result column="SETTING_NO" property="settingNo"/>
		<result column="REF_UNO" property="refUno"/>
		<result column="SETTING_TITLE" property="settingTitle"/>
		<result column="SETTING_VERSION" property="settingVersion"/>
		<result column="SORT_DESCRIPTION" property="sortDescription"/>
		<result column="SETTING_INFO" property="settingInfo"/>
		<result column="SETTING_CODE" property="settingCode"/>
		<result column="INPUT" property="input"/>
		<result column="SETTING_PATH" property="settingPath"/>
		<result column="STATUS" property="status"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="MODIFY_DATE" property="modifyDate"/>
	</resultMap>
	<!-- 부적절한 접근 사용자 조회 -->
	<resultMap type="blockIp" id="blockIpResultSet">
		<result column="IP" property="ip"/>
		<result column="COUNT" property="count"/>
		<result column="STATUS" property="status"/>
	</resultMap>
	
	<select id="selectIssues" resultMap="issuesAndErrorResultSet">
		SELECT SETTING_TITLE, COUNT(*) CC, SORT_DESCRIPTION
		FROM BOARD B
		JOIN MEMBER M ON (B.BOARD_WRITER = M.USER_NO)
		JOIN ERROR_BOARD E ON (B.BOARD_NO = E.REF_BNO)
		JOIN CREATE_SETTING C ON(E.REF_SNO = C.SETTING_NO)
        WHERE E.SOLVED = 'N' AND B.STATUS = 'Y' AND E.ERROR_TYPE = 'S'
        GROUP BY SETTING_TITLE, SORT_DESCRIPTION
        ORDER BY CC DESC
	</select>
	<!-- 관리가 필요한 게시글 개수 및 회원수 -->
	<select id="allCount" resultMap="allTableResultSet">
		SELECT
			(SELECT COUNT(*) FROM MEMBER WHERE STATUS = 'Y') member,
			(SELECT COUNT(*) FROM SUPPORTERS S JOIN MEMBER M ON (S.REF_UNO = M.USER_NO) WHERE M.STATUS = 'Y' AND GITHUB_ID != ' ') supporters,
			(select count(*) from create_setting c join supporters using(ref_uno) join member m on (ref_uno = user_no) where github_id != ' ' and type=1 and ref_uno != 1 and m.status = 'Y' and c.status = 'W') createSetting,
			(SELECT COUNT(*) FROM ERROR_BOARD E JOIN BOARD B ON(E.REF_BNO = B.BOARD_NO) WHERE E.SOLVED = 'N' AND B.STATUS = 'Y' AND E.ERROR_TYPE='N') errorBoard,
			(SELECT COUNT(*) FROM BOARD WHERE STATUS = 'Y' AND CATEGORY = 'B') bulletinBoard,
			(SELECT COUNT(*) FROM BOARD WHERE STATUS = 'Y' AND CATEGORY = 'Q') qnaBoard,
			(SELECT COUNT(*) FROM BLOCK_IP) blockIp,
			(SELECT COUNT(*) FROM ERROR_BOARD E JOIN BOARD B ON(E.REF_BNO = B.BOARD_NO) WHERE E.SOLVED = 'N' AND B.STATUS = 'Y' AND E.ERROR_TYPE='S') issue
		FROM DUAL
	</select>
	
	<!-- 서포터즈 회원 조회 -->
	<select id="selectSupporters" resultMap="supportResultSet">
		SELECT * FROM SUPPORTERS JOIN MEMBER ON (USER_NO = REF_UNO) AND GITHUB_ID != ' '
	</select>
	<delete id="deleteSupporter" parameterType="string">
		DELETE FROM SUPPORTERS
			WHERE REF_UNO = (
    			SELECT USER_NO FROM MEMBER WHERE USER_ID = #{uesrId}
			)
	</delete>
	

	
	<!-- 아직 상태가 대기중인 라이브러리 및 세팅 -->
	<select id="selectWaitingLibrary" resultMap="createSettingResultSet">
		SELECT * FROM CREATE_SETTING WHERE STATUS='W' 
	</select>
	
	<!-- 상태가 결정되지 않은 에러 보드 게시판의 이름과 개수와 설명 -->
	<select id="selectErrorBoardCount" resultMap="issuesAndErrorResultSet">
		 select Setting_title, c.sort_description, nvl(a.cc,0) cc from create_setting c
        left join (
            SELECT SETTING_TITLE, SORT_DESCRIPTION ,NVL(COUNT(REF_SNO),0) CC
		FROM CREATE_SETTING C
		LEFT JOIN ERROR_BOARD E ON (C.SETTING_NO = E.REF_SNO)
		WHERE ERROR_TYPE= 'N' AND SOLVED = 'N' AND C.STATUS = 'Y'
		GROUP BY SETTING_TITLE, SORT_DESCRIPTION, REF_SNO
		ORDER BY CC DESC
        ) a  using (setting_title)
        WHERE C.STATUS = 'Y'
        order by CC desc
	</select>
	

	<!-- 부적절한 접근자 -->
	<!-- 전체 조회 -->
	<select id="selectBolckIp" resultMap="blockIpResultSet">
		SELECT * FROM BLOCK_IP ORDER BY STATUS DESC
	</select>
	<!-- 개별 조회 -->
	<select id="selectBlockIpUser" parameterType="string" resultMap="blockIpResultSet">
		SELECT * FROM BLOCK_IP WHERE IP = #{ip} 
	</select>
	<!-- 새로운 ip 추가 -->
	<insert id="insertBlockIpUser" parameterType="string">
		INSERT INTO BLOCK_IP VALUES (#{ip}, DEFAULT, DEFAULT)
	</insert>
	<!-- 카운터 추가 -->
	<update id="updateBlockIpUser" parameterType="string">
		UPDATE BLOCK_IP SET COUNT = COUNT + 1 WHERE IP = #{ip}
	</update>
	<!-- 5회가 되면 차단 -->
	<update id="blockBlockIpUser" parameterType="string">
		UPDATE BLOCK_IP SET STATUS = 'Y' WHERE IP = #{ip}
	</update>
	
	<update id="updateblockClear" parameterType="string">
		UPDATE BLOCK_IP SET COUNT = 0, STATUS = 'N' WHERE IP = #{ip}
	</update>
	
	<update id="updateblockAction" parameterType="string">
		UPDATE BLOCK_IP SET COUNT = 5, STATUS = 'Y' WHERE IP = #{ip}
	</update>
	<!--============================================================-->
	<!-- 유저 -->
	<select id="selectMemberList" resultMap="supportResultSet">
		SELECT * FROM MEMBER M LEFT JOIN SUPPORTERS S ON (M.USER_NO = S.REF_UNO) WHERE M.STATUS = 'Y'
	</select>
	<!--============================================================-->
	
	<insert id="InsertSupporters" parameterType="_int">
		INSERT INTO SUPPORTERS VALUES (#{client_No}, ' ', SYSDATE, DEFAULT)
	</insert>
	<delete id="deleteSupporters" parameterType="_int">
		DELETE FROM SUPPORTERS WHERE REF_UNO = #{client_No}
	</delete>
	
	<select id="selectOneSupport" parameterType="_int" resultMap="supportResultSet">
		SELECT * FROM SUPPORTERS S JOIN MEMBER M ON(S.REF_UNO = M.USER_NO) WHERE S.REF_UNO = ${userNo}
	</select>
	
	<select id="selectMembercondition" parameterType="ms" resultMap="supportResultSet">
		SELECT * FROM MEMBER M LEFT JOIN SUPPORTERS S ON (M.USER_NO = S.REF_UNO) WHERE M.STATUS = 'Y' 
		<if test='searchQna == "id"'>
			AND M.USER_ID LIKE '%'||#{searchInput}||'%'
		</if>
		<if test='searchQna == "nickName"'>
			AND M.NICKNAME LIKE '%'||#{searchInput}||'%'
		</if>
		<if test='searchQna == "etc"'>
			<if test='searchInput == "admin"'>
				AND M.TYPE = 2
			</if>
			<if test='searchInput == "wait"'>
				AND s.github_id = ' '
			</if>
			<if test='searchInput == "supporter"'>
				AND s.github_id != ' '
			</if>
			<if test='searchInput == "common"'>
				AND REF_UNO IS NULL
			</if>
		</if>
		<if test='searchQna == "total"'></if>
	</select>
	
	<select id="selectCountMemberCondition" parameterType="ms" resultType="_int">
		SELECT COUNT(*) FROM MEMBER M LEFT JOIN SUPPORTERS S ON (M.USER_NO = S.REF_UNO) WHERE M.STATUS = 'Y' 
		<if test='searchQna == "id"'>
			AND M.USER_ID LIKE '%'||#{searchInput}||'%'
		</if>
		<if test='searchQna == "nickName"'>
			AND M.NICKNAME LIKE '%'||#{searchInput}||'%'
		</if>
		<if test='searchQna == "etc"'>
			<if test='searchInput == "admin"'>
				AND M.TYPE = 2
			</if>
			<if test='searchInput == "wait"'>
				AND s.github_id = ' '
			</if>
			<if test='searchInput == "supporter"'>
				AND s.github_id != ' '
			</if>
			<if test='searchInput == "common"'>
				AND REF_UNO IS NULL
			</if>
		</if>
		<if test='searchQna == "total"'></if>
	</select>
	
	<!-- 서포터즈 초대 후 7일간 아무 연락 없는 사람은 지운다. -->
	<select id="selectSupporterWaitList" resultMap="supportResultSet">
		SELECT * FROM MEMBER M LEFT JOIN SUPPORTERS S ON (M.USER_NO = S.REF_UNO)
        WHERE M.STATUS = 'Y' 
		AND S.GITHUB_ID = ' '
        AND TO_CHAR(s.create_date, 'YYYYMMDD') - TO_CHAR(SYSDATE, 'YYYYMMDD') = 7
	</select>
	
	<update id="insertSupporterGithubId" parameterType="supporters">
		UPDATE SUPPORTERS
		SET GITHUB_ID = #{githubId},
			REPO_URL = #{repoUrl}
		WHERE REF_UNO = #{refUno} 
	</update>
	<select id="selectIssueDetail" resultMap="issuesDetailResultSet">
		<!-- 세팅 작성 페이지가 완성되지 않았기 때문에 아직 모른다. -->
		select e.ref_sno, c.setting_No,c.sort_description,b.board_no, c.setting_title, c.setting_version, b.board_writer, b.title, m.user_id,m.nickName, b.create_date, c.setting_info, c.setting_code, b.content, e.modified_code, e.modified_info
		from error_board e
		join create_setting c on (ref_sno = setting_no)
		join board b on (b.board_no = e.ref_bno)
		join member m on (b.board_writer = m.user_no)
		where setting_title = #{settingTitle}
		and e.solved = 'N'
		and e.error_type = 'S'
		order by m.user_id
	</select>
	<select id="selectOneError" resultMap="issuesDetailResultSet">
		select * from
		(select RANK() OVER (ORDER BY user_id DESC) rank,  b.board_no, b.board_writer, b.title, m.user_id,m.nickName, b.create_date, b.content, e.modified_code, e.modified_info 
		from error_board e
		join create_setting c on (ref_sno = setting_no)
		join board b on (b.board_no = e.ref_bno)
		join member m on (b.board_writer = m.user_no)
		where setting_title = #{setting.settingTitle}
		and e.solved = 'N'
		and e.error_type = 'S'
		order by m.user_Id) x
        where rank = #{page}
	</select>
	
	<select id="selectErrorDetail" resultMap="errorBoardMapper.errorSetResultSet">
		SELECT BOARD_NO,
			   SETTING_TITLE,
			   SETTING_VERSION,
			   SETTING_CODE,
			   NICKNAME,
			   TITLE,
			   CONTENT,
			   CREATE_DATE,
			   SOLVED,
			   ERROR_TYPE,
			   MODIFIED_CODE,
			   MODIFIED_INFO,
			   SETTING_INFO
		FROM BOARD B
		JOIN MEMBER M ON (B.BOARD_WRITER = M.USER_NO)
		JOIN ERROR_BOARD E ON (B.BOARD_NO = E.REF_BNO)
		JOIN CREATE_SETTING C ON(E.REF_SNO = C.SETTING_NO)
		WHERE SETTING_TITLE = #{settingTitle}
		AND ERROR_TYPE='N' AND SOLVED='N'
		AND B.STATUS = 'Y'
	</select>
	
	<update id="updateErrorType">
		UPDATE ERROR_BOARD
		<if test='tagName == "userError"'>
		SET ERROR_TYPE = 'U'
		</if>
		<if test='tagName == "koalaError"'>
		SET ERROR_TYPE = 'S'
		</if>
		WHERE REF_BNO = #{boardNo}
	</update>
	
	
	<select id="selectSqlTitle" parameterType="string" resultType="string">
		SELECT SQLTITLE FROM SQLCLOUD WHERE SQLTITLE = #{sqlTitle}
	</select>
	<select id="selectTeam" parameterType="_int" resultMap="sqlCloudResultSet">
		SELECT A.* FROM SQLCLOUD A JOIN SQLINVITE B ON(A.TEAM_NO = B.TEAM_NO) WHERE USER_NO = #{userNo}
	</select>
	<select id="selectTeamMember" parameterType="_int" resultMap="memberMapper.memberResultSet">
		SELECT user_id, email, nickname, user_no
		FROM SQLCLOUD A
		JOIN SQLINVITE B ON(A.TEAM_NO = B.TEAM_NO)
		JOIN MEMBER M USING(USER_NO)
		WHERE B.TEAM_NO = #{teamNo}
	</select>
	
	<select id="selectCreator" parameterType="_int" resultType="int">
		SELECT CREATOR_NO FROM SQLCLOUD WHERE TEAM_NO = #{teamNo}
	</select>
	
	<select id="selectSqlContent" parameterType="_int" resultType="string">
		SELECT SQLCONTENT FROM SQLCLOUD WHERE TEAM_NO = #{teamNo}
	</select>
	<update id="updateTeamSql" parameterType="sqlCloud">
		UPDATE SQLCLOUD
		SET SQLCONTENT = #{sqlContent},
		    MODIFY_DATE = SYSDATE
		WHERE TEAM_NO = #{teamNo}
	</update>
	<select id="selectSqlDate" resultMap="sqlCloudResultSet">
		SELECT * FROM SQLCLOUD WHERE TEAM_NO = #{teamNo}
	</select>
	
	<select id="searchMember" parameterType="string" resultMap="memberMapper.memberResultSet">
	SELECT *
		FROM MEMBER M
		LEFT JOIN MEMBER_IMAGE P ON (M.USER_NO = P.REF_UNO)
		WHERE STATUS = 'Y'
		AND USER_ID LIKE '%'||#{text}||'%'
	</select>
	<select id="selectMemberDetailInfo" resultMap="supportResultSet">
		SELECT *
		FROM MEMBER M
		LEFT JOIN MEMBER_IMAGE P ON (M.USER_NO = P.REF_UNO)
        LEFT JOIN supporters S ON(M.USER_NO = S.REF_UNO)
		WHERE M.STATUS = 'Y'
        AND M.USER_ID = #{userId}
	</select>
	<insert id="insertSQLteam" parameterType="sqlCloud">
		INSERT INTO SQLCLOUD VALUES (SQL_TNO.NEXTVAL, #{teamName}, #{creatorNo}, #{sqlContent}, DEFAULT, DEFAULT)
	</insert>
	<insert id="insertSQLteamMember" parameterType="sqlInvite">
		INSERT INTO SQLINVITE VALUES (#{creatorNo}, #{userNo}, SQL_TNO.CURRVAL)
	</insert>
	<insert id="updateSQLteamMember" parameterType="sqlInvite">
		INSERT INTO SQLINVITE VALUES (#{creatorNo}, #{userNo}, #{teamNo})
	</insert>
	
	<select id="selectOneTeam" parameterType="_int" resultMap="modifyTeamResultSet">
		select s.teamname, z.user_id creatorId ,m.user_id, m.nickname, m.user_no, g.file_path, g.change_name, p.github_id
		from sqlcloud s
		join sqlinvite i using(team_no)
		join member z on(s.creator_no = z.user_no)
		join member m on(i.user_no = m.user_no)
		left join member_image g on(m.user_no = g.ref_uno)
		left join supporters p on(m.user_no = p.ref_uno)
		where team_no = #{teamNo}
	</select>
	
	<delete id="deleteTeamMember">
		delete from sqlinvite
		where team_no = 
		(select team_no
         from sqlcloud
         where teamname = #{teamName})
	</delete>
	
	<select id="selectTeamTeamNo" parameterType="string" resultType="_int">
		SELECT TEAM_NO FROM SQLCLOUD WHERE TEAMNAME = #{teamName}
	</select>
	
	<delete id="deleteTeam" parameterType="_int">
		DELETE FROM SQLCLOUD WHERE TEAM_NO = #{teamNo}
	</delete>
	<delete id="deleteLastTeamInfo" parameterType="_int">
		DELETE FROM sqlinvite WHERE TEAM_NO = #{teamNo}
	</delete>
	<delete id="taemQuit" parameterType="sqlInvite">
		DELETE FROM SQLINVITE WHERE team_no = #{teamNo} and user_no = #{userNo}
	</delete>
	
	<select id="selectWaitingLib" resultMap="settingMapper.settingResultSet">
		select * from create_setting c
		join supporters using(ref_uno)
		join member m on (ref_uno = user_no)
		where github_id != ' '
		and type = 1
		and ref_uno != 1
		and m.status = 'Y'
		and c.status = 'W'
	</select>
	<update id="approvelib">
		update create_setting
		set status = 'Y'
		where setting_no = #{settingNo}
	</update>
	<update id="disapprovelib">
		update create_setting
		set status = 'N'
		where setting_no = #{settingNo}
	</update>
	
	<update id="updateIssueSuccess">
		UPDATE ERROR_BOARD
		SET solved='Y'
		WHERE REF_BNO = #{boardNo}
	</update>
	<update id="updateIssueDate">
		UPDATE BOARD
		SET MODIFY_DATE = SYSDATE
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<insert id="updateSetting" parameterType="setting">
		INSERT INTO create_setting VALUES
		(SEQ_SET.nextval, #{refUno}, #{settingTitle}, #{settingVersion}, #{sortDescription}, #{settingInfo}, #{settingCode}, #{input}, 'Y', SYSDATE)
	</insert>
	<select id="listDetail" resultMap="settingMapper.settingResultSet">
		SELECT * FROM CREATE_SETTING WHERE SETTING_NO = #{settingNo}
	</select>
	<select id="selectprevSetting" resultMap="settingMapper.settingResultSet">
		SELECT * FROM CREATE_SETTING WHERE SETTING_TITLE=#{settingTitle} AND STATUS = 'Y'
	</select>
	<update id="updateSettingN">
		UPDATE CREATE_SETTING
		SET STATUS = 'N'
		WHERE SETTING_NO = #{settingNo}
	</update>
</mapper>